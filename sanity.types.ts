/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type EmailNotification = {
  _id: string;
  _type: "emailNotification";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  type?: "welcome" | "achievement" | "courseCompletion" | "weeklyDigest";
  subject?: string;
  content?: string;
  sentAt?: string;
  deliveryStatus?: "sent" | "delivered" | "opened" | "failed";
  resendId?: string;
  metadata?: {
    data?: string;
  };
};

export type ChatMessage = {
  _id: string;
  _type: "chatMessage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  messageId?: string;
  session?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "chatSession";
  };
  role?: "system" | "user" | "assistant";
  metadata?: {
    custom?: string;
  };
  parts?: Array<{
    type?: string;
    text?: string;
    state?: "streaming" | "done";
    _type: "textUIPart";
    _key: string;
  } | {
    type?: string;
    text?: string;
    state?: "streaming" | "done";
    providerMetadata?: {
      data?: string;
    };
    _type: "reasoningUIPart";
    _key: string;
  } | {
    type?: string;
    name?: string;
    toolCallId?: string;
    state?: "input-streaming" | "input-available" | "output-available" | "output-error";
    input?: {
      data?: string;
    };
    output?: {
      data?: string;
    };
    errorText?: string;
    providerExecuted?: boolean;
    _type: "toolUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    url?: string;
    title?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceUrlUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    mediaType?: string;
    title?: string;
    filename?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceDocumentUIPart";
    _key: string;
  } | {
    type?: string;
    mediaType?: string;
    filename?: string;
    url?: string;
    _type: "fileUIPart";
    _key: string;
  } | {
    type?: string;
    name?: string;
    dataId?: string;
    data?: {
      content?: string;
    };
    _type: "dataUIPart";
    _key: string;
  } | {
    type?: string;
    _type: "stepStartUIPart";
    _key: string;
  }>;
};

export type ChatSession = {
  _id: string;
  _type: "chatSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  users?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  lessons?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "lesson";
  }>;
  sessionId?: string;
  createdAt?: string;
  lastActivity?: string;
  status?: "active" | "inactive" | "ended";
  metadata?: {
    userLevel?: string;
    lessonTitle?: string;
    totalMessages?: number;
  };
};

export type UserAchievement = {
  _id: string;
  _type: "userAchievement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  achievement?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "achievement";
  };
  earned?: boolean;
  earnedAt?: string;
  progress?: number;
  notified?: boolean;
};

export type Achievement = {
  _id: string;
  _type: "achievement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  title?: string;
  description?: string;
  icon?: string;
  category?: "first_steps" | "streak" | "quiz" | "course" | "social";
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  criteria?: {
    type?: "lesson_count" | "quiz_score" | "course_completion" | "streak_days" | "custom";
    target?: number;
    threshold?: number;
  };
  points?: number;
  isActive?: boolean;
};

export type LearningSession = {
  _id: string;
  _type: "learningSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  startTime?: string;
  endTime?: string;
  durationMinutes?: number;
  activitiesCompleted?: Array<{
    type?: "lesson" | "quiz" | "reading";
    contentId?: string;
    timeSpent?: number;
    _key: string;
  }>;
};

export type Recommendation = {
  _id: string;
  _type: "recommendation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  query?: string;
  reason?: string;
  createdFor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  courses?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  status?: "in_progress" | "completed" | "failed";
  message?: string;
};

export type Enrollment = {
  _id: string;
  _type: "enrollment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userEnrolled?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  contentsCompleted?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  dateCompleted?: string;
  percentComplete?: number;
};

export type QuizAttempt = {
  _id: string;
  _type: "quizAttempt";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  quiz?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  attemptNumber?: number;
  status?: "in_progress" | "submitted" | "graded";
  answers?: Array<{
    questionIndex?: number;
    selectedOptionIndex?: number;
    isOutcome?: "correct" | "incorrect";
    timeTakenMs?: number;
    _type: "answer";
    _key: string;
  }>;
  correctCount?: number;
  totalQuestions?: number;
  score?: number;
  percentage?: number;
  startedAt?: string;
  submittedAt?: string;
  durationMs?: number;
  feedback?: string;
  metadata?: {
    custom?: string;
  };
};

export type Quiz = {
  _id: string;
  _type: "quiz";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  maxAttempt?: number;
  questions?: Array<{
    question?: string;
    options?: Array<string>;
    correctOptionIndex?: number;
    explanation?: string;
    _type: "question";
    _key: string;
  }>;
};

export type Lesson = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  content?: string;
  videoUrl?: string;
};

export type Chapter = {
  _id: string;
  _type: "chapter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  description?: string;
  contents?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
};

export type Course = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  difficulty?: "beginner" | "intermediate" | "advanced";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  learningOutcomes?: Array<string>;
  resources?: Array<{
    label?: string;
    url?: string;
    _type: "resource";
    _key: string;
  }>;
  resourcesDigest?: string;
};

export type Topic = {
  _id: string;
  _type: "topic";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  icon?: string;
  color?: Color;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "not_started" | "completed";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "beginner" | "intermediate" | "advanced";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "id" | "en" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = EmailNotification | ChatMessage | ChatSession | UserAchievement | Achievement | LearningSession | Recommendation | Enrollment | QuizAttempt | Quiz | Lesson | Chapter | Course | Topic | User | Color | RgbaColor | HsvaColor | HslaColor | Markdown | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/infrastructure/database/sanity.queries.ts
// Variable: chatMessageQuery
// Query: *[_type == "chatMessage" && _id == $messageId][0] {  _id,  _rev,  _type,  _createdAt,  _updatedAt,  messageId,  session->{    _id,    _type,    sessionId,    status,    createdAt,    lastActivity,    metadata  },  role,  metadata {    custom  },  parts[]}
export type ChatMessageQueryResult = {
  _id: string;
  _rev: string;
  _type: "chatMessage";
  _createdAt: string;
  _updatedAt: string;
  messageId: string | null;
  session: {
    _id: string;
    _type: "chatSession";
    sessionId: string | null;
    status: "active" | "ended" | "inactive" | null;
    createdAt: string | null;
    lastActivity: string | null;
    metadata: {
      userLevel?: string;
      lessonTitle?: string;
      totalMessages?: number;
    } | null;
  } | null;
  role: "assistant" | "system" | "user" | null;
  metadata: {
    custom: string | null;
  } | null;
  parts: Array<{
    type?: string;
    name?: string;
    dataId?: string;
    data?: {
      content?: string;
    };
    _type: "dataUIPart";
    _key: string;
  } | {
    type?: string;
    mediaType?: string;
    filename?: string;
    url?: string;
    _type: "fileUIPart";
    _key: string;
  } | {
    type?: string;
    text?: string;
    state?: "done" | "streaming";
    providerMetadata?: {
      data?: string;
    };
    _type: "reasoningUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    mediaType?: string;
    title?: string;
    filename?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceDocumentUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    url?: string;
    title?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceUrlUIPart";
    _key: string;
  } | {
    type?: string;
    _type: "stepStartUIPart";
    _key: string;
  } | {
    type?: string;
    text?: string;
    state?: "done" | "streaming";
    _type: "textUIPart";
    _key: string;
  } | {
    type?: string;
    name?: string;
    toolCallId?: string;
    state?: "input-available" | "input-streaming" | "output-available" | "output-error";
    input?: {
      data?: string;
    };
    output?: {
      data?: string;
    };
    errorText?: string;
    providerExecuted?: boolean;
    _type: "toolUIPart";
    _key: string;
  }> | null;
} | null;
// Variable: getActiveSessionQuery
// Query: *[_type == "chatSession" &&     references($userId) &&     references($lessonId) &&     status == "active"][0]
export type GetActiveSessionQueryResult = {
  _id: string;
  _type: "chatSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  users?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  lessons?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "lesson";
  }>;
  sessionId?: string;
  createdAt?: string;
  lastActivity?: string;
  status?: "active" | "ended" | "inactive";
  metadata?: {
    userLevel?: string;
    lessonTitle?: string;
    totalMessages?: number;
  };
} | null;
// Variable: getUserByIdQuery
// Query: *[_type == "user" && _id == $userId][0]
export type GetUserByIdQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "en" | "id" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
} | null;
// Variable: getUserByClerkIdQuery
// Query: *[_type == "user" && clerkId == $clerkId][0]
export type GetUserByClerkIdQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "en" | "id" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
} | null;
// Variable: getLessonByIdQuery
// Query: *[_type == "lesson" && _id == $lessonId][0]
export type GetLessonByIdQueryResult = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  content?: string;
  videoUrl?: string;
} | null;
// Variable: getUserLevelQuery
// Query: *[_type == "user" && _id == $userId][0]{level}
export type GetUserLevelQueryResult = {
  level: "advanced" | "beginner" | "intermediate" | null;
} | null;
// Variable: getLessonTitleQuery
// Query: *[_type == "lesson" && _id == $lessonId][0]{title}
export type GetLessonTitleQueryResult = {
  title: string | null;
} | null;
// Variable: getCoursesByIdsQuery
// Query: *[_type == "course" && _id in $ids]
export type GetCoursesByIdsQueryResult = Array<{
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  learningOutcomes?: Array<string>;
  resources?: Array<{
    label?: string;
    url?: string;
    _type: "resource";
    _key: string;
  }>;
  resourcesDigest?: string;
}>;
// Variable: getExistingRecommendationQuery
// Query: *[_type == "recommendation" && createdFor._ref == $userId][0]
export type GetExistingRecommendationQueryResult = {
  _id: string;
  _type: "recommendation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  query?: string;
  reason?: string;
  createdFor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  courses?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  status?: "completed" | "failed" | "in_progress";
  message?: string;
} | null;
// Variable: getChatHistoryQuery
// Query: *[_type == "chatMessage" &&     references(*[_type == "chatSession" &&       references($userId) &&       references($lessonId) &&       status == "active"]._id)  ] | order(timestamp asc) {    _id,    role,    content,    timestamp,    status  }
export type GetChatHistoryQueryResult = Array<{
  _id: string;
  role: "assistant" | "system" | "user" | null;
  content: null;
  timestamp: null;
  status: null;
}>;
// Variable: getActiveLearningSessionQuery
// Query: *[_type == "learningSession" &&     user._ref == $userId &&     endTime == null][0]
export type GetActiveLearningSessionQueryResult = {
  _id: string;
  _type: "learningSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  startTime?: string;
  endTime?: string;
  durationMinutes?: number;
  activitiesCompleted?: Array<{
    type?: "lesson" | "quiz" | "reading";
    contentId?: string;
    timeSpent?: number;
    _key: string;
  }>;
} | null;
// Variable: getLearningSessionByIdQuery
// Query: *[_type == "learningSession" && _id == $sessionId][0]
export type GetLearningSessionByIdQueryResult = {
  _id: string;
  _type: "learningSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  startTime?: string;
  endTime?: string;
  durationMinutes?: number;
  activitiesCompleted?: Array<{
    type?: "lesson" | "quiz" | "reading";
    contentId?: string;
    timeSpent?: number;
    _key: string;
  }>;
} | null;
// Variable: getUserEnrollmentQuery
// Query: *[_type == "enrollment" &&     userEnrolled[0]._ref == $userId &&     course[0]._ref == $courseId][0]
export type GetUserEnrollmentQueryResult = {
  _id: string;
  _type: "enrollment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userEnrolled?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  contentsCompleted?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  dateCompleted?: string;
  percentComplete?: number;
} | null;
// Variable: getQuizAttemptQuery
// Query: *[_type == "quizAttempt" &&     user[0]._ref == $userId &&     quiz[0]._ref == $quizId] | order(_createdAt desc)[0]
export type GetQuizAttemptQueryResult = {
  _id: string;
  _type: "quizAttempt";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  quiz?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  attemptNumber?: number;
  status?: "graded" | "in_progress" | "submitted";
  answers?: Array<{
    questionIndex?: number;
    selectedOptionIndex?: number;
    isOutcome?: "correct" | "incorrect";
    timeTakenMs?: number;
    _type: "answer";
    _key: string;
  }>;
  correctCount?: number;
  totalQuestions?: number;
  score?: number;
  percentage?: number;
  startedAt?: string;
  submittedAt?: string;
  durationMs?: number;
  feedback?: string;
  metadata?: {
    custom?: string;
  };
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n*[_type == \"chatMessage\" && _id == $messageId][0] {\n  _id,\n  _rev,\n  _type,\n  _createdAt,\n  _updatedAt,\n  messageId,\n  session->{\n    _id,\n    _type,\n    sessionId,\n    status,\n    createdAt,\n    lastActivity,\n    metadata\n  },\n  role,\n  metadata {\n    custom\n  },\n  parts[]\n}": ChatMessageQueryResult;
    "*[_type == \"chatSession\" && \n    references($userId) && \n    references($lessonId) && \n    status == \"active\"][0]": GetActiveSessionQueryResult;
    "*[_type == \"user\" && _id == $userId][0]": GetUserByIdQueryResult;
    "*[_type == \"user\" && clerkId == $clerkId][0]": GetUserByClerkIdQueryResult;
    "*[_type == \"lesson\" && _id == $lessonId][0]": GetLessonByIdQueryResult;
    "*[_type == \"user\" && _id == $userId][0]{level}": GetUserLevelQueryResult;
    "*[_type == \"lesson\" && _id == $lessonId][0]{title}": GetLessonTitleQueryResult;
    "*[_type == \"course\" && _id in $ids]": GetCoursesByIdsQueryResult;
    "*[_type == \"recommendation\" && createdFor._ref == $userId][0]": GetExistingRecommendationQueryResult;
    "*[_type == \"chatMessage\" && \n    references(*[_type == \"chatSession\" && \n      references($userId) && \n      references($lessonId) && \n      status == \"active\"]._id)\n  ] | order(timestamp asc) {\n    _id,\n    role,\n    content,\n    timestamp,\n    status\n  }": GetChatHistoryQueryResult;
    "*[_type == \"learningSession\" && \n    user._ref == $userId && \n    endTime == null][0]": GetActiveLearningSessionQueryResult;
    "*[_type == \"learningSession\" && _id == $sessionId][0]": GetLearningSessionByIdQueryResult;
    "*[_type == \"enrollment\" && \n    userEnrolled[0]._ref == $userId && \n    course[0]._ref == $courseId][0]": GetUserEnrollmentQueryResult;
    "*[_type == \"quizAttempt\" && \n    user[0]._ref == $userId && \n    quiz[0]._ref == $quizId] | order(_createdAt desc)[0]": GetQuizAttemptQueryResult;
  }
}
